name: PR Quality Gate

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'publish/**'
      - 'governance/**'
      - 'scripts/**'
      - 'mkdocs.yml'

permissions:
  contents: read
  pull-requests: write

jobs:
  dq-comment:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: pip

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install pandas

      - name: Build DQ snapshot (markdown)
        id: dq
        run: |
          python scripts/pr_quality_comment.py > dq.md

      - name: Post PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('dq.md', 'utf8');
            const {owner, repo} = context.repo;
            const issue_number = context.payload.pull_request.number;
            const hdr = "### Data Quality Snapshot (PR)";
            // delete old comments with same header
            const {data: comments} = await github.rest.issues.listComments({owner, repo, issue_number, per_page: 100});
            for (const c of comments) {
              if (c.user.type === "Bot" && c.body && c.body.includes(hdr)) {
                await github.rest.issues.deleteComment({owner, repo, comment_id: c.id});
              }
            }
            // post fresh
            await github.rest.issues.createComment({owner, repo, issue_number, body});
